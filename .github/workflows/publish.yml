name: Publish Python Package to Google Artifact Registry

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      GCP_REGION: ${{ vars.GCP_REGION }}
      PYPI_REPO_NAME: ${{ vars.PYPI_REPO_NAME }}
      PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Clean old build artifacts
        run: rm -rf dist/*

      - name: Get package name and version
        id: pkg
        run: |
          echo "name=$(poetry version | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Decode GCP service account key
        run: echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > "${HOME}/gcp-key.json"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Delete version from GAR if exists
        continue-on-error: true
        run: |
          PACKAGE_NAME="${{ steps.pkg.outputs.name }}"
          VERSION="${{ steps.pkg.outputs.version }}"
          REPO="${{ env.PYPI_REPO_NAME }}"
          LOCATION="${{ env.GCP_REGION }}"
          PROJECT="${{ env.GCP_PROJECT_ID }}"
          
          echo "Attempting to delete version ${VERSION} of ${PACKAGE_NAME} from Artifact Registry..."
          
          gcloud artifacts versions delete "$VERSION" \
            --package="$PACKAGE_NAME" \
            --repository="$REPO" \
            --location="$LOCATION" \
            --project="$PROJECT" \
            --quiet

      - name: Generate Artifact Registry access token
        id: get_token
        run: |
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Configure .pypirc for Artifact Registry
        run: |
          cat > ~/.pypirc <<EOF
          [distutils]
          index-servers =
              artifact-registry

          [artifact-registry]
          repository: https://${{ env.GCP_REGION }}-python.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PYPI_REPO_NAME }}/
          username: oauth2accesstoken
          password: ${{ steps.get_token.outputs.token }}
          EOF

      - name: Build the package
        run: poetry build

      - name: Publish to Artifact Registry
        run: poetry publish -r artifact-registry